{
    "collab_server" : "",
    "contents" : "#test_app 180317\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(XLConnect)\nlibrary(plyr)\nlibrary(reshape2)\nlibrary(grid)\nlibrary(shinydashboard)\n\nshinyServer(function(input, output) {\n\n  calculate <- reactive({\n    \n    ##################### functions #####################\n    \n    #normalising one well\n    norm.well <- function(x){\n      cs <- rev(cumsum(rev(x))); #cumulative sum\n      xn <- x/(10*(cs))*1000;\n      return(xn)\n    }\n    \n    ####################################################\n    \n    if (input$assay_type == 2){\n      dc <- 0\n    }\n    else { \n      dc <- input$dc\n    }\n    \n    inputfile <- input$data_file\n    \n    if (is.null(inputfile))\n      return(NULL)\n    \n    rawdata <- readWorksheetFromFile(inputfile$datapath, sheet=1)\n    colnames(rawdata) <- gsub(\"M.\", \"\", colnames(rawdata))\n    rawdata[is.na(rawdata)]=0\n  \n    \n    #normdata <- apply(rawdata, 2, norm.well) #w/o dependencies \n    normdata <- colwise(norm.well)(rawdata) # colwise needs library(plyr)\n    \n    ms_rawdata <- rawdata[1:(nrow(rawdata)-dc),] # isolates MS values of raw data\n    ms_normdata <- normdata[1:(nrow(normdata)-dc),] # isolates MS values of normalized data\n    \n    ms_rawdata$time <- seq(0, (nrow(ms_rawdata)-1)*10, 10) # adds time values in seconds\n    ms_normdata$time <- seq(0, (nrow(ms_normdata)-1)*10, 10) # adds time values in seconds\n    \n    ms_rd_melted <- melt(ms_rawdata, id.vars = \"time\", variable.name = \"well\") # formatting for ggplot\n    ms_nd_melted <- melt(ms_normdata, id.vars = \"time\", variable.name = \"well\") # formatting for ggplot\n    \n    calc_output <- list(\"ms_rawdata\" = ms_rawdata, \n                        \"ms_normdata\" = ms_normdata, \n                        \"ms_rd_melted\" = ms_rd_melted, \n                        \"ms_nd_melted\" = ms_nd_melted,\n                        \"yaxis_max\" = max(ms_nd_melted$value))\n    return(calc_output)\n    \n  })\n\n  get_layout <- reactive({\n    inputlayout <- input$layout_file\n    \n    if (is.null(inputlayout))\n      return(NULL)\n    \n    raw_plate_layout <- readWorksheetFromFile(inputlayout$datapath, sheet=1)\n    \n    plate_layout <- mutate(raw_plate_layout,\n                           Row=as.numeric(match(toupper(substr(well, 1, 1)), LETTERS)),\n                           Column=as.numeric(substr(well, 2, 5)))\n    \n    return(plate_layout)\n    \n  })\n  \n  plate_layout <- reactive({\n    \n    plate_layout <- get_layout()\n    \n    if (is.null(plate_layout))\n      return(NULL)\n    \n    glayout <- ggplot(data=plate_layout, aes(x=Column, y=Row)) +\n      geom_point(size=9) +\n      geom_point(size=7, aes(colour = elicitor)) +\n      geom_point(size=9, aes(alpha = genotype)) +\n      scale_alpha_discrete(range = c(0.4, 0.05)) +\n      labs(title=\"Plate Layout\")\n    glayout <- glayout +\n      coord_fixed(ratio=(13/12)/(9/8), xlim=c(0.8, 12.2), ylim=c(0.6, 8.4)) +\n      scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:8]) +\n      scale_x_continuous(breaks=seq(1, 12))\n    glayout <- glayout + theme_bw() + guides(colour = guide_legend(title = \"Elicitors\", ncol = 2, byrow = TRUE), alpha = guide_legend(title = \"Genotypes\", ncol = 2, byrow = TRUE)) +\n      theme(\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_blank(),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        strip.background = element_blank(),\n        panel.background = element_blank(),\n        panel.border = element_rect(colour = \"black\"),\n        legend.key=element_blank()\n      )\n    return(glayout)\n    \n  })\n  \n  mean_max_calculate <- reactive({\n    \n    plate_layout <- get_layout()\n    \n    if (is.null(plate_layout))\n      return(NULL)\n    \n    raw_plate_layout <- plate_layout[,1:4]\n    raw_plate_layout <- raw_plate_layout[complete.cases(raw_plate_layout),] #delete rows with NAs\n    \n    elicitors <- unique(raw_plate_layout$elicitor)\n    genotypes <- unique(raw_plate_layout$genotype)\n    \n    data <- calculate()\n    \n    if (is.null(data))\n      return(NULL)\n    \n    ms_normdata <- data$ms_normdata\n    \n    all_means <- matrix(nrow = length(elicitors)*length(genotypes), ncol = 4, dimnames = NULL)\n    all_means_graph <- matrix(nrow = length(elicitors)*length(genotypes)*length(ms_normdata[,1]), ncol = 5, dimnames = NULL)\n    i = 1\n    i2 = 1\n    \n    for(eli in elicitors){\n      for(gen in genotypes){\n        wells <- raw_plate_layout$well[raw_plate_layout$elicitor == eli & raw_plate_layout$genotype == gen]\n        current_set <- ms_normdata[colnames(ms_normdata) %in% wells]\n        \n        current_rowmeans <- rowMeans(current_set)\n        current_rowsds <- apply(current_set, 1, sd)\n        current_max <- max(current_rowmeans[16:length(current_rowmeans)])\n        current_sd <- current_rowsds[current_rowmeans==current_max]\n        #print(length(c(eli, gen, current_max, current_sd)))\n        #print(c(paste(gen, eli, sep = \" \"), current_max, current_sd))\n        all_means[i,] <- c(eli, gen, current_max, current_sd)\n        all_means_graph[i2:(i2+length(current_rowmeans)-1),1] <- rep(eli, length(current_rowmeans))\n        all_means_graph[i2:(i2+length(current_rowmeans)-1),2] <- rep(gen, length(current_rowmeans))\n        all_means_graph[i2:(i2+length(current_rowmeans)-1),3] <- current_rowmeans\n        all_means_graph[i2:(i2+length(current_rowmeans)-1),4] <- current_rowsds\n        all_means_graph[i2:(i2+length(current_rowmeans)-1),5] <- seq(0, (nrow(ms_normdata)-1)*10, 10)\n        \n        i = i+1\n        i2 = i2 + length(current_rowmeans)\n      }\n    }\n    \n    total_output <- list(\"all_means\" = all_means,\n                         \"all_means_graph\" = all_means_graph)\n    \n    return(total_output)\n    \n  })\n  \n  well_plots <- reactive({\n    \n    data <- calculate()\n    \n    \n    if (is.null(data))\n      return(NULL)\n    \n    if (input$data_type == 1){\n      chosen_set <- data$ms_rd_melted\n    }\n    \n    if (input$assay_type == 2){\n      chosen_set <- data$ms_rd_melted\n    }\n    \n    else {\n      chosen_set <- data$ms_nd_melted\n    }\n    \n    g <- ggplot(chosen_set, aes(time, value)) + geom_line() + facet_wrap(~well, ncol = 12)\n    \n    g <- g + theme_bw() + theme(\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_blank(),\n      axis.title.x = element_blank(),\n      axis.title.y = element_blank(),\n      axis.ticks.x = element_blank(),\n      axis.text.x = element_blank(),\n      strip.text.x = element_blank(),\n      strip.background = element_blank(),\n      panel.background = element_blank(),\n      panel.border = element_rect(colour = \"black\")\n    )\n    \n    #g <- g + geom_line(data = data$ms_normdata, aes(time, A1), color = \"red\")\n    g <- g + annotate(\"text\",\n                      x = (max(chosen_set$time)*0.85),\n                      y = (max(chosen_set$value, na.rm = TRUE)*0.9),\n                      label = colnames(data$ms_normdata)[1:(length(data$ms_normdata)-1)],\n                      size = 2.5)\n    \n    \n    #if (data$yaxis_max != input$ylim){\n    #  g <- g + ylim(0, input$ylim)\n    #}\n    \n    return(g)\n\n  })\n  \n  bar_plots_max <- reactive({\n    \n    plate_layout <- get_layout()\n    \n    if (is.null(plate_layout))\n      return(NULL)\n    \n    raw_plate_layout <- plate_layout[,1:4]\n    raw_plate_layout <- raw_plate_layout[complete.cases(raw_plate_layout),] #delete rows with NAs\n    \n    elicitors <- unique(raw_plate_layout$elicitor)\n    genotypes <- unique(raw_plate_layout$genotype)\n    \n    complete_data <- mean_max_calculate()\n    \n    all_means <- complete_data$all_means\n    \n    num_all_means <- all_means[,3:4]\n    class(num_all_means) <- \"numeric\" # sonst werden max und se nicht alszahlen erkannt...\n    max_barplot <- data.frame(\n      eli = all_means[,1],\n      gen = factor(all_means[,2], levels = genotypes),\n      maxima = num_all_means[,1],\n      se = num_all_means[,2]\n    )\n    \n    if (input$bar_columns == 2){\n      bpmax <- ggplot(max_barplot, aes(fill=eli, y=maxima, x=eli)) + facet_wrap(~gen, ncol = 2) + ggtitle(\"Maxima with SD\")\n    } else {\n      bpmax <- ggplot(max_barplot, aes(fill=eli, y=maxima, x=eli)) + facet_wrap(~gen, ncol = 1) + ggtitle(\"Maxima with SD\")\n      }\n    \n    if(input$bar_rotation == 2){bpmax <- bpmax + coord_flip() + theme(legend.position = \"none\")}\n    \n    bpmax <- bpmax + geom_bar(position=\"dodge\", stat=\"identity\")\n    bpmax <- bpmax + geom_errorbar(aes(ymin=maxima-se, ymax=maxima+se),\n                                   width=.2,                    # Width of the error bars\n                                   position=position_dodge(.9))\n    \n    \n    bpmax <- bpmax + labs(x=\"\", y=\"L/Lmax\") + theme(axis.text.x = element_text(angle = 90, size = 10, vjust = 0.5),\n                                                    legend.title=element_blank(),\n                                                    panel.background = element_rect(fill = \"white\", colour = \"grey90\"),\n                                                    panel.grid.major = element_line(color = \"grey90\"),\n                                                    strip.background = element_rect(fill = \"grey90\", colour = NA),\n                                                    panel.grid.minor = element_line(colour = \"grey90\", size = 0.25))\n    \n    return(bpmax)\n    \n  })\n  \n  \n  mean_graphs <- reactive({\n    \n    plate_layout <- get_layout()\n    \n    if (is.null(plate_layout))\n      return(NULL)\n    \n    raw_plate_layout <- plate_layout[,1:4]\n    raw_plate_layout <- raw_plate_layout[complete.cases(raw_plate_layout),] #delete rows with NAs\n    \n    elicitors <- unique(raw_plate_layout$elicitor)\n    genotypes <- unique(raw_plate_layout$genotype)\n    \n    complete_data <- mean_max_calculate()\n    \n    all_means_graph <- complete_data$all_means_graph\n    \n    num_all_means_graph <- all_means_graph[,3:5]\n    class(num_all_means_graph) <- \"numeric\" # sonst werden max und se nicht alszahlen erkannt...\n    max_lineplot <- data.frame(\n      eli = all_means_graph[,1],\n      gen = factor(all_means_graph[,2], levels = genotypes),\n      mean_value = num_all_means_graph[,1],\n      se = num_all_means_graph[,2],\n      time = num_all_means_graph[,3]\n    )\n    \n    lpmax2 <- ggplot(max_lineplot, aes(color = gen,x=time, y=mean_value)) + geom_line() + facet_wrap(~eli) + \n      scale_color_manual(values=c(\"navy\", \"red3\", \"deeppink1\", \"greenyellow\", \"gray20\", \"green4\")) + \n      ggtitle(\"Mean with SD\") +\n      geom_line(aes(x=time,y=mean_value-se), alpha=0.2)+ \n      geom_line(aes(x=time,y=mean_value+se), alpha=0.2)+\n      geom_errorbar(aes(ymin=mean_value-se, ymax=mean_value+se), alpha=0.2,\n                    width=.2,                    # Width of the error bars\n                    position=position_dodge(.9))\n    lpmax2 <- lpmax2 + labs(x=\"\", y=\"L/Lmax\") + theme(legend.title=element_blank(),\n                                                      panel.background = element_rect(fill = \"white\", colour = \"grey90\"),\n                                                      panel.grid.major = element_line(color = \"grey90\"),\n                                                      strip.background = element_rect(fill = \"grey90\", colour = NA),\n                                                      panel.grid.minor = element_line(colour = \"grey90\", size = 0.25),\n                                                      legend.key=element_rect(fill='white'),\n                                                      strip.text.x = element_text(size=10))\n    return(lpmax2)\n  })\n  \n  output$plot <- renderPlot({\n    plot <- well_plots()\n    show(plot)\n  })\n  \n  output$plate_layout <- renderPlot({\n    layout <- plate_layout()\n    show(layout)\n  })\n  \n  output$bar_max <- renderPlot({\n    barplot <- bar_plots_max()\n    show(barplot)\n  })\n  \n  output$graph_mean <- renderPlot({\n    mean_graph <- mean_graphs()\n    show(mean_graph)\n  })\n  \n  output$ui.downloaddata <- renderUI({\n    if (is.null(calculate())) \n      return(NULL)\n    if (input$assay_type == 2)\n      return(NULL)\n    downloadButton('downloadData', 'Download Data')\n  })\n  output$downloadData <- downloadHandler(\n    \n    filename = function() {paste0(\"norm_\", gsub(unlist(strsplit(input$data_file$name, \"[.]\")[1])[-1], \"\", input$data_file$name), \"xlsx\")},\n    content = function(file) {\n      data <- calculate()\n      #writeWorksheetToFile(file, data = data$ms_normdata, sheet = \"normalized data\")\n      fname <- paste0(\"norm_\", gsub(unlist(strsplit(input$data_file$name, \"[.]\")[1])[-1], \"\", input$data_file$name), \"xlsx\")\n      wb <- loadWorkbook(fname, create = TRUE)\n      createSheet(wb, name = \"raw data\")\n      writeWorksheet(wb, data$ms_rawdata, sheet = \"raw data\")\n      createSheet(wb, name = \"normalized data\")\n      writeWorksheet(wb, data$ms_normdata, sheet = \"normalized data\")\n      saveWorkbook(wb)\n      file.rename(fname,file)\n    \n    }\n  )\n  \n  output$ui.downloadplot <- renderUI({\n    if (is.null(calculate()))\n      return(NULL)\n    downloadButton('downloadPlot', 'Download Plot')\n  })\n  output$downloadPlot <- downloadHandler(\n    filename = function() {paste0(\"plot_\", gsub(unlist(strsplit(input$data_file$name, \"[.]\")[1])[-1], \"\", input$data_file$name), \"pdf\")},\n    content = function(file) {\n      #well_plots()\n      #ggsave(file, width = 29.7, height = 21.0, units = \"cm\", limitsize = FALSE)\n      wellcurves <- well_plots()\n      platelayout <- plate_layout()\n      bar_plots <- bar_plots_max()\n      graph_mean <- mean_graphs()\n      \n      pdf(file, width = 29.7, height = 21.0, paper = \"a4r\")\n      invisible(print(wellcurves))\n      if (is.null(platelayout) == FALSE){invisible(print(platelayout))}\n      if (is.null(bar_plots) == FALSE){invisible(print(bar_plots))}\n      if (is.null(graph_mean) == FALSE){invisible(print(graph_mean))}\n      dev.off()\n      \n    }\n  )\n  \n  output$ui.settings1 <- renderUI({\n    if (input$assay_type == 2){\n      HTML(\"At the moment it is only possible to view and download raw data graphs for ROS measurements! <br/> <br/> <div><span style='color:red'>Keep in mind that the data has to be in the 'Luminoscan' format!</span></div>\")\n    } else{\n    radioButtons(inputId=\"data_type\",\n                 label=\"Show graphs for:\",\n                 choices = list(\"raw data\" = 1, \"normalized data\" = 2), selected = 2)\n    } \n  })\n  \n  output$ui.settings2 <- renderUI({\n    if (input$assay_type == 2){\n      return(NULL)\n    }\n    sliderInput(\"dc\", \"Discharge measurement points\",min=0, max=20, value=15)\n  })\n  \n  \n  output$menu <- renderMenu({\n    \n    inputlayout <- input$layout_file\n    \n    sidebarMenu(\n      menuItem(\"Raw Data\", tabName = \"rawdata\", icon = icon(\"calculator\"), selected = TRUE),\n      if (is.null(inputlayout)==FALSE){\n        menuItem(\"Data Summary\", tabName = \"data_summary\", icon = icon(\"bar-chart\"),\n                menuSubItem(\"Mean Maxima\", tabName = \"norm_data1\"),\n                menuSubItem(\"Mean Kinetics\", tabName = \"norm_data2\"))\n      }\n    )\n  })\n})",
    "created" : 1492969001001.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "74940681",
    "id" : "2DB49DA0",
    "lastKnownWriteTime" : 1494795176,
    "last_content_update" : 1494795176466,
    "path" : "~/GitHub/Assay_Calculator/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}